#!/bin/bash

help ()
{
	echo "dsh - Docker Shell"
	echo "Usage: dsh <command>"
	echo "Commands list:"
	echo 
	echo "	start (up)		Start vagrant vm and docker containers -OR- restarts containers if vm is already up"
	echo "	stop (down, halt)	Stop vagrant vm"
	echo "	reload (restart)	Re-start vagrant vm and docker containers"
	echo "	status (st)		Show vm/containers status"
	echo "	bash			Start bash on web container"
	echo "	run			Run a command in web container"
	echo "	  Usage: dsh run <command> <param> <param> <param>..."
	echo "	help			Output this help"
	echo
}

# checks if binary exists and callable in PATH
binary_found ()
{
	if [[ $1 == '' ]]; then
		return 1;
	fi

	local bpath=`which $1`
	
	if [[ $bpath != '' ]] && [ -f `which $1` ]; then
		return 0
	else
		echo "\"$1\" executable not found."
		return 1
	fi
}

# check that vagrant binary exists
is_vagrant ()
{
	binary_found 'vagrant';
	return $?
}

# check that docker-compose binary exists
is_docker_compose ()
{
	binary_found 'docker-compose';
	return $?
}

# check that docker binary exists
is_docker ()
{
	binary_found 'docker';
	return $?
}

# Search for file in current dir and all parent dirs
# @param $1 filename
# @param $2 variable that gets result - a path to file if it was found
upfind ()
{
	if [[ $1 == '' ]]; then return 1; fi
	local up='../'
	local pathup='./'
	local slashes=${PWD//[^\/]/}
	for (( i=${#slashes}; i>0; --i )) ; do 
		if [ -f "${pathup}$1" ] ; then
			eval $2="${pathup}"
			break
		else
			pathup=$pathup$up
		fi
	done
}

# checks if yml or vagrantfile is absent
is_yml_absent ()
{
	local yml_path=''
	local vagrant_path=''

	upfind "docker-compose.yml" yml_path
	if [ $yml_path == '' ] ; then
		echo "dsh: docker-compose.yml not found in your directory tree"
		return 0
	fi

	upfind "Vagrantfile" vagrant_path
	if [ $vagrant_path == '' ] ; then
		echo "dsh: Vagrantfile not found in your directory tree"
		return 0
	fi

	#if we got here files are present
	return 1
}

# checks if vm exists (as per vagrant)
is_vm_exist ()
{
	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		res=`vagrant status | grep -e "boot2docker.*not created"`
		if [[ $res == '' ]]; then
			return 0
		else 
			echo "dsh: Vagrant reports that boot2docker vm is not created. Please check you Vagrantfile or run \"dsh up\""
			return 1
		fi
	else
		return 2
	fi
}

# checks if vm is stopped
is_vm_stopped ()
{
	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		res=`vagrant status | grep -e "boot2docker.*running"`
		if [[ $res == '' ]]; then
			return 0
		else 
			return 1
		fi
	else
		return 2
	fi
}

#------------------------------- Commands -----------------------------------
# bring box up
up ()
{
	echo "Checking files..."
	if is_yml_absent ; then return 2; fi
	if ! is_vm_exist ; then return 2; fi
	if is_vagrant ; then
		echo "Starting vagrant vm..."
		vagrant up
		started=$?
		if [ $started -eq 0 ] && is_docker_compose ; then
			echo "Starting containers..."
			docker-compose up -d
		fi
	fi
}

# stop box
down ()
{
	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		echo "Stopping vagrant vm..."
		vagrant halt
	fi
}

# call 911
restart ()
{
	echo "Checking files..."
	if is_yml_absent ; then return 2; fi
	if ! is_vm_exist ; then return 2; fi
	if is_vagrant ; then
		echo "Restarting vagrant vm..."
		vagrant reload
		started=$?
		if [ $started -eq 0 ] && is_docker_compose ; then
			echo "Starting containers..."
			docker-compose up -d
		fi
	fi	
}

# output status of boot2docker if stopped or containers if started
status ()
{
	is_vm_stopped
	stopped=$?
	case $stopped in
		2)
			return
			;;
		1)
			if is_docker_compose ; then
				docker-compose ps
			fi
			;;
		0)
			echo "boot2docker is not running"
			if ! is_vm_exist ; then
				return
			else
				echo "Run \"dsh up\" to start boot2docker"
			fi
			;;
	esac
}

# start interactive bash in container
_bash ()
{
	if is_docker && is_docker_compose ; then
		docker exec -it $(docker-compose ps -q web) bash -i
		RES=$?
		if [ $RES -ne 0 ]; then
			echo
			echo "dsh: You might want to run \"dsh up\""
		fi
	fi
}

# Get current path relative to docroot
# @param $1 name of variable to get result
cmdpath ()
{
	if [[ $1 == '' ]]; then return; fi
	local yml_path=''
	upfind "docker-compose.yml" yml_path
	# get relative docroot path from docker-compose.yml config
	local docroot_relative=$(grep "&docroot" ${yml_path}docker-compose.yml | sed 's/.*"\(.*\):.*$/\1/')
	local docroot_absolute=$( cd "${yml_path}$docroot_relative" ; pwd )
	# leave only part of absolute path that is after docroot
	local cmdpath=${PWD#$docroot_absolute/}
	if [[ "$cmdpath" == "$(pwd)" ]] ; then
		# if replacement didnt happen then we are in docroot or higher
		eval $1="."
	else	
		eval $1="$cmdpath"
	fi
}

# Run a command in container
# param $* command with it's params to run
_run ()
{
	if is_docker && is_docker_compose ; then
		local cd_path
		local yml_path=''
		cmdpath cd_path
		upfind "docker-compose.yml" yml_path
		cd $yml_path
		docker exec -it $(docker-compose ps -q web) bash -ic "cd $cd_path && $*"
	fi
}

# start interactive mysql shell
mysql ()
{
	return; #dummy
}

case $1 in
	up)
		up
		;;
	start)
		up
		;;
	stop)
		down
		;;
	down)
		down
		;;
	halt)
		down
		;;
	restart)
		restart
		;;
	reload)
		restart
		;;
	status)
		status
		;;
	st)
		status
		;;
	bash)
		_bash
		;;
	run)
		shift
		_run $*
		;;
	mysql)
		mysql
		;;
	*)
		help
		exit 0
esac